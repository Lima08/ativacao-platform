generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String
  password  String
  companyId String
  imageUrl  String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns Campaign[]
  trainings Training[]
  // analizes Analize[]
  company   Company    @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Company {
  id       String  @id @default(uuid())
  name     String
  slug     String  @unique
  imageUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User[]
  campaigns Campaign[]
  trainings Training[]
  // analizes Analize[]

  @@map("companies")
}

model Media {
  id         String    @id @default(uuid())
  url        String    @unique
  type       MediaType
  key        String    
  campaignId String?
  trainingId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign Campaign? @relation(fields: [campaignId], references: [id])
  training Training? @relation(fields: [trainingId], references: [id])

  @@map("media")
}

enum MediaType {
  image
  video
}

model Training {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String
  companyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medias  Media[]
  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("trainings")
}

model Campaign {
  id          String  @id @default(uuid())
  name        String
  description String?
  userId      String
  companyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medias  Media[]
  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("campaigns")
}

// model Analize {
//   id        String      @default(uuid()) @id
//   name      String?
//   userId     String   (pegar o email para enviar o status)
//   companyId      String?
//   bucketUrl      String?
//   biUrl      String?
//   status      enum? default = "pending"?? (pending, done, rejected)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

// user    User    @relation(fields: [userId], references: [id])

//   @@map("analizes")
// Metodos de usecases: Get, uptate, getByCompay,

// }

// model Permissions { (vide esquma de permissionamento por feat)
//   id        String      @default(uuid()) @id
//   url     String   @unique
//   owner      idDoDono
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("users")
// }

// Pensar em usecasa, controlers etc - vide projetos anteriores

//  TODO: EScrever documentação das requests
