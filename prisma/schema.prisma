generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(uuid())
  name      String
  email     String  @unique
  password  String
  companyId String
  imageUrl  String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaigns    Campaign[]
  trainings    Training[]
  userTraining UserTraining[]
  analyzes     Analysis[]

  company Company @relation(fields: [companyId], references: [id])

  @@map("users")
}

model Company {
  id       String  @id @default(uuid())
  name     String
  slug     String  @unique
  imageUrl String? @db.VarChar(255)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User[]
  campaigns Campaign[]
  trainings Training[]

  @@map("companies")
}

model Media {
  id         String    @id @default(uuid())
  url        String    @unique @db.VarChar(255)
  type       MediaType
  key        String
  campaignId String?
  trainingId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign Campaign? @relation(fields: [campaignId], references: [id])
  training Training? @relation(fields: [trainingId], references: [id])

  @@map("media")
}

enum MediaType {
  image
  video
}

model Training {
  id          String  @id @default(uuid())
  name        String
  active      Boolean @default(true)
  description String? @db.VarChar(255)
  userId      String
  companyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medias       Media[]
  user         User           @relation(fields: [userId], references: [id])
  company      Company        @relation(fields: [companyId], references: [id])
  userTraining UserTraining[]

  @@map("trainings")
}

model Campaign {
  id          String  @id @default(uuid())
  name        String
  active      Boolean @default(true)
  description String? @db.VarChar(255)
  userId      String
  companyId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  medias  Media[]
  user    User    @relation(fields: [userId], references: [id])
  company Company @relation(fields: [companyId], references: [id])

  @@map("campaigns")
}

model UserTraining {
  id         String             @id @default(uuid())
  trainingId String
  userId     String
  status     TrainingStatusType @default(started)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id])
  training Training @relation(fields: [trainingId], references: [id])

  @@map("user_training")
}

enum TrainingStatusType {
  started
  finished
}

model Analysis {
  id        String             @id @default(uuid())
  title     String
  userId    String
  bucketUrl String?            @db.VarChar(255)
  biUrl     String?            @db.VarChar(255)
  status    AnalysisStatusType @default(pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@map("analyzes")
}

enum AnalysisStatusType {
  pending
  rejected
  done
}

// model Permissions { (vide esquma de permissionamento por feat)
//   id        String      @default(uuid()) @id
//   url     String   @unique
//   owner      idDoDono
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   @@map("users")
// }

// Pensar em usecasa, controlers etc - vide projetos anteriores

//  TODO: EScrever documentação das requests
